created: 20201202200514984
modified: 20210121214546784
tags: $:/tags/Macro
title: $:/plugins/nico/projectify/macros/todo-list
type: text/vnd.tiddlywiki

\define lingo-base() $:/language/projectify/

\define project-refile-actions()
<!-- Macro similar to the todo-list drop actions, but used in project lists/cards -->
  <$action-listops $tiddler=<<actionTiddler>> $tags=<<project-refile-tags>>/>
\end

\define todo-list-drop-actions(tag)
<!-- Same as list-tagged-draggable-drop-actions, but removing the item from its old project and adding the todo tag. -->
<$action-listops $tiddler=<<actionTiddler>> $tags=<<todo-list-drop-tags>>/>
<!-- Save the current ordering of the tiddlers with this tag -->
<$set name="order" filter="[<__tag__>tagging[]]">
<!-- Remove any list-after or list-before fields from the tiddlers with this tag -->
<$list filter="[<__tag__>tagging[]]">
<$action-deletefield $field="list-before"/>
<$action-deletefield $field="list-after"/>
</$list>
<!-- Save the new order to the Tag Tiddler -->
<$action-listops $tiddler=<<__tag__>> $field="list" $filter="+[enlist<order>] +[insertbefore:currentTiddler<actionTiddler>]"/>
</$set>
\end

\define todo-list-filtered(subFilter)
  <$vars
    projectTag={{!!title}}
    dragHandle="yes"
    list-tagged-draggable-drop-actions=<<todo-list-drop-actions>>
  >
    <div class="py-todos">
      <$macrocall
        $name="list-tagged-draggable"
        tag=<<projectTag>>
        subFilter=<<__subFilter__>>
        itemTemplate="$:/plugins/nico/projectify/ui/todo/TodoItem"
      />
    </div>
  </$vars>
\end
  
\define todo-list(emptyTemplate)
  <$list filter=<<py-has-no-open-todo>> variable="ignore">
    <$transclude tiddler=<<__emptyTemplate__>>/>
  </$list>
  <$list filter=<<py-has-scheduled-todos>> variable="ignore">
    <label class="py-label"><<lingo Scheduled>></label>
    <$macrocall $name="todo-list-filtered" subFilter=<<py-scheduled-todos-subfilter>>/>
  </$list>
  <$list filter=<<py-has-unscheduled-todos>> variable="ignore">
    <$list filter=<<py-has-scheduled-todos>>>
      <label class="py-label"><<lingo OtherTasks>></label>
    </$list>
  </$list>
  <$macrocall $name="todo-list-filtered" subFilter=<<py-unscheduled-todos-subfilter>>/>
\end

\define todo-list-completed()
  <div class="py-todos py-completed-todos">
    <$list
      filter=<<py-completed-todos>>
      template="$:/plugins/nico/projectify/ui/todo/TodoItem"
    />
  </div>
\end


\procedure generic-todo-list-rich-filters(callbackproc: "todo-list-rich-filters-core")
    <$let currentFilter=`[all[tiddlers]!has[draft.of]has[$(datefield)$]] :filter[$(todofilter)$]`
          filterStart0=`:filter[get[$(datefield)$]compare:string:gteq<fromDate>]`
  	  filterEnd0=`:filter[get[$(datefield)$]compare:string:lteq<toDate>]`
	  filterPriority0=`:filter[get[priority]else[0]compare:integer:gteq<priority>]`
	  filterText0=`:filter[search:caption<textQuery>]`
    >
      <$set name="filterStart" filter="[<fromDate>] :filter[minlength[1]] :then[<filterStart0>]">
        <$set name="filterEnd" filter="[<toDate>] :filter[minlength[1]] :then[<filterEnd0>]">
          <$set name="filterPriority" filter="[<priority>] :filter[minlength[1]] :then[<filterPriority0>]">
            <$set name="filterText" filter="[<textQuery>] :filter[minlength[2]] :then[<filterText0>]">
              <$let currentFilter=`$(currentFilter)$ $(filterStart)$ $(filterEnd)$ $(filterPriority)$ $(filterText)$ $(sortfilter)$`>
  	        <$transclude $variable=<<callbackproc>> />
	      </$let>
	    </$set>
  	  </$set>
        </$set>
      </$set>
  </$let>
\end


\procedure todo-list-rich-filters-core()
  <$set name="showmax" filter="[all[current]get[show.max]]" emptyValue={{$:/config/projectify/MaxTodoFilteredList}}>
    <$let filterMax0=`+[first[$(showmax)$]]`>
      <$set name="filterMax" filter="[<showmax>] :filter[!match[all]] :then[<filterMax0>]"> 
        <$let filterSortedDates=`$(currentFilter)$ $(filterMax)$ :map[get[$(datefield)$]format:date[YYYY0MM0DD]] +[unique[]]`
                  filterMonth=`$(filterSortedDates)$ :map[format:date[YYYY0MM]] +[unique[]]`
        >

          <$list filter=<<filterMonth>> variable="dateprefix">
            <div class="py-todo-list-formatted-month">
              <$list filter="[<dateprefix>addsuffix[01]format:date[MMM YYYY]]" variable="monthyear">
                <$text text=<<monthyear>> />
              </$list>
            </div>

            <$list filter=`$(filterSortedDates)$ :filter[prefix[$(dateprefix)$]]` variable="day">
              <dl>
                <div class="py-todo-list-formatted-day">
                  <dt> <$list filter="[<day>format:date[DDD DD]]" variable="formattedday"> <<formattedday>> </$list> </dt>
                </div>
                <dd>
                  <$list filter=`$(currentFilter)$ :filter[get[$(datefield)$]prefix[$(day)$]]`
		         template="$:/plugins/nico/projectify/ui/todo/TodoItem"
			 />
                </dd>
              </dl>
            </$list>
		
          </$list>

        </$let>
      </$set>
    </$let>
  </$set>
\end

\procedure todo-list-rich-filters-show-max-control()


  <$set name="maxConfig" filter="[all[current]{$:/config/projectify/MaxTodoFilteredList}]" emptyValue="100">
    <$list filter="[<maxConfig>match[all] <maxConfig>]" variable="unused">
      <$checkbox disabled="yes" class="disabled" field="show.max" checked="all" unchecked=<<maxConfig>> default=<<maxConfig>> > <<lingo ShowAll>> </$checkbox>
    </$list>
    <$list filter="[<maxConfig>!match[all]]" variable="unused">
      <$let filterCount=`$(currentFilter)$ +[count[]]`>
        <$list filter=`$(filterCount)$ :map[compare:integer:gt<maxConfig>]`  >
          <$list filter="[all[current]minlength[1]]">
            <$checkbox disabled="no" field="show.max" checked="all" unchecked=<<maxConfig>> default=<<maxConfig>> > <<lingo ShowAll>> </$checkbox>
          </$list>
	  <$list filter="[all[current]count[]compare:integer:eq[0]]">
            <$checkbox disabled="yes" class="disabled" field="show.max" checked="all" unchecked=<<maxConfig>> default=<<maxConfig>> > <<lingo ShowAll>> </$checkbox>
	  </$list>
        </$list>
      </$let>
    </$list>
  </$set>

\end

